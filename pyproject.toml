[tool.poetry]
name = "conductor-gateway"
version = "0.1.0"
description = "Conductor Gateway - Autonomous MCP Server"
authors = ["Primoia Team"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.11"
cachetools = "5.5.1"
python-jose = {extras = ["cryptography"], version = "^3.5.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
google-generativeai = "^0.8.5"
uvicorn = "^0.36.0"
fastapi = "^0.116.2"
pyyaml = "6.0.2"
langchain-openai = "^0.3.33"
langchain-anthropic = "^0.3.20"
langchain-community = "^0.3.29"
langchain-core = "^0.3.76"
mcp = "^1.14.1"
mcp-use = "^1.3.10"
httpx = "^0.28.1"
requests = "^2.32.5"
aiohttp = "^3.12.15"
beautifulsoup4 = "^4.13.5"
playwright = "^1.55.0"
selenium = "^4.35.0"
webdriver-manager = "^4.0.2"
pymongo = "^4.15.1"
boto3 = "^1.40.35"
groq = "^0.31.1"
fireworks-ai = "^0.19.19"
ollama = "^0.5.4"
prompt-toolkit = "^3.0.52"
pygments = "^2.19.2"
python-json-logger = "^3.3.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
ruff = "^0.9.1"
mypy = "^1.5.1"
bandit = "^1.7.5"
pre-commit = "^3.4.0"

[tool.poetry.group.docs.dependencies]
sphinx = "^7.1.2"
sphinx-rtd-theme = "^1.3.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 100

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "B904",  # raise from
    "C901",  # too complex
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["src"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
check_untyped_defs = false
disallow_any_generics = false
disallow_incomplete_defs = false
disallow_untyped_defs = false
no_implicit_optional = false
warn_redundant_casts = true
warn_unused_ignores = false
warn_return_any = false
strict_equality = false

[[tool.mypy.overrides]]
module = [
    "mcp.*",
    "mcp_use.*",
    "langchain_core.*",
    "langchain_openai.*",
    "langchain_anthropic.*",
    "langchain_community.*",
    "uvicorn.*",
    "yaml.*",
    "google.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --tb=short"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
    "api: API tests",
    "mcp: MCP server tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]